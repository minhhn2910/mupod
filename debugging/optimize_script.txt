#### this file contains the sample optimization scripts for getting bitwidth depents on weightage of each layer.
### to keep the code clean, I include only two examples, 1 simplest alexnet, 1 most complex resnet152
## For each CNN, there are 3 arrays of parameters need to be filled :
### global lambda_k and global c_k are lambda and theta values measure in step 1 in the README file.
### they are also stored in debugging/lambda_theta.txt file after you run step 1
### global p_k is the weightage value of each layer contributes to the final objective
### if the objective is reducing bitwidth reading input, p_k is the number of inputs of each layer (as reflected in this code)
### if the objective is reducing MAC energy, p_k is the number of MAC operations of each layer.
### two P_K arrays corresponding to 2 objectives included in each CNN below, P_K always in the order : input count contraints 1st then MAC count 2nd
### need to comment 1 p_k and uncomment the other to run the script.
### output 3 bitwidths: round_safe (work most of the time, as it safely floors the log2 to int value)
### round_standard and round_aggressive are less usable but can be used in the future to squeeze any possible redudant bits in round_safe
#### round_standard and round_aggressive possibly produce some working bitwidth when the round_safe is too safe
### Note that, this produces fractional bitwidth, to get the final bitwidth, we add this one with integer bitwidth getting from step 3.
### negative fraction means a scale factor 2^F is multiplied with each value.
### e.g. fraction = -1 means  real values will always be rounded to nearest even numbers (0,2,4,6,8, etc.) (any real value from 3->5 is rounded to 4)
### depends on hardware design, negative fraction can be implemented as 1 implicit shift or just simply assign F least significant bit in integer part = 0.

function r = g (x)
  r = [sum(x)-1];
endfunction

function r = h (x)
  r = [sum(x)-1];
endfunction

##the below 3 functions for rounding a number to their nearest integer , resulted in fraction bitwidth.

function r = round_safe(delta_x)
bits = [];
for i = [1:length(delta_x)]
    bits = [bits, ceil(delta_x(i))];
endfor
r = bits;
endfunction
function r = round_standard(delta_x)
bits = [];
for i = [1:length(delta_x)]
    bits = [bits, round(delta_x(i))];
endfor
r = bits;
endfunction
function r = round_aggressive(delta_x)
bits = [];
for i = [1:length(delta_x)]
    bits = [bits, floor(delta_x(i))];
endfor
r = bits;
endfunction

#### Resnet 152
#{
#global target_sigma = 0.414
#global target_sigma = 1.17 #5%
#global int_part = [9, 7, 7, 6, 5, 7, 6, 5, 7, 5, 5, 7, 7, 5, 6, 7, 5, 5, 7, 5, 5, 7, 5, 6, 7, 5, 5, 7, 5, 5, 7, 5, 6, 7, 6, 6, 7, 7, 5, 5, 7, 5, 6, 7, 7, 7, 8, 8, 8, 8, 8, 7, 9, 8, 8, 9, 8, 9, 10, 9, 9, 10, 9, 8, 10, 8, 8, 10, 9, 10, 10, 9, 9, 10, 9, 9, 10, 9, 9, 10, 9, 9, 10, 9, 9, 10, 9, 10, 11, 9, 9, 11, 9, 9, 11, 9, 10, 12, 9, 10, 12, 10, 10, 12, 9, 10, 12, 10, 10, 12, 9, 9, 12, 9, 10, 11, 9, 9, 11, 9, 10, 11, 9, 9, 11, 9, 10, 11, 9, 9, 11, 9, 10, 11, 9, 9, 10, 9, 9, 10, 8, 9, 10, 7, 8, 9, 9, 6, 5, 8, 5, 5, 9, 6, 6, 7]
#global p_k =[150528.0, 200704.0, 200704.0, 200704.0, 200704.0, 802816.0, 200704.0, 200704.0, 802816.0, 200704.0, 200704.0, 802816.0, 802816.0, 100352.0, 100352.0, 401408.0, 100352.0, 100352.0, 401408.0, 100352.0, 100352.0, 401408.0, 100352.0, 100352.0, 401408.0, 100352.0, 100352.0, 401408.0, 100352.0, 100352.0, 401408.0, 100352.0, 100352.0, 401408.0, 100352.0, 100352.0, 401408.0, 401408.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 50176.0, 50176.0, 200704.0, 200704.0, 25088.0, 25088.0, 100352.0, 25088.0, 25088.0, 100352.0, 25088.0, 25088.0, 2048.0]/1000

#global lambda_k = [18.553, 0.407453, 1.7814, 1.74392, 1.00974, 0.983087, 1.49826, 1.64235, 1.09437, 2.38402, 3.17689, 1.01023, 2.42831, 2.26275, 2.57291, 3.77894, 6.16784, 5.77636, 3.3552, 5.59903, 5.24519, 3.52581, 2.37559, 3.11478, 4.33864, 4.36932, 5.54165, 4.82232, 3.02543, 2.79639, 4.77492, 4.20093, 5.996, 4.68245, 4.08857, 3.62737, 4.30123, 13.2226, 6.72948, 3.79406, 7.1214, 10.0269, 6.09592, 6.56221, 8.40714, 6.04139, 6.18731, 7.36792, 5.42058, 6.26683, 8.74831, 6.71268, 6.56171, 7.17604, 6.89188, 5.72131, 4.53475, 5.6044, 6.05369, 6.55852, 5.21469, 7.243, 5.96162, 6.31454, 6.64314, 6.58975, 5.76572, 6.61939, 5.41991, 4.20927, 6.93951, 7.90097, 6.09222, 6.48632, 4.79916, 6.27327, 6.46854, 3.8471, 4.1086, 6.13313, 5.99513, 6.27749, 6.02853, 5.88601, 6.10406, 6.18755, 3.76588, 7.25323, 5.92493, 4.6283, 6.87212, 6.13916, 4.75628, 6.04102, 5.9129, 4.55668, 6.94411, 6.48467, 5.95026, 7.15743, 5.90256, 8.43475, 8.99161, 5.8158, 7.88783, 9.18035, 5.20974, 7.23768, 9.59112, 5.25856, 5.60491, 6.86566, 5.39803, 4.5139, 6.20245, 5.5881, 5.04296, 5.58544, 5.42031, 3.73152, 5.05605, 5.09521, 3.78366, 6.37357, 4.74878, 5.11907, 4.91165, 4.44248, 3.65194, 4.65575, 4.42983, 5.01717, 6.59169, 4.55584, 3.64743, 4.98669, 4.64192, 5.28668, 4.94671, 5.61932, 3.20239, 5.4269, 5.31044, 3.3099, 5.74975, 5.11396, 8.23079, 3.45146, 2.45524, 7.5549, 2.08977, 2.80159, 8.96335, 2.70153, 2.20029, 1.28483]

#global c_k = [0.425209, 0.0329243, 0.0346237, -0.0447385, 0.00925562, 0.0901435, 0.185113, 0.185965, 0.0765949, 0.398556, 0.203422, 0.100088, 0.0985674, 0.1061, 0.156585, 0.168414, 0.805476, 0.543334, 0.241994, 0.604874, 0.242521, 0.198561, 0.0606993, 0.263462, 0.250652, 0.587742, 0.508627, 0.197291, 0.34548, 0.517845, 0.233856, 0.396741, 0.446035, 0.264505, 0.35122, 0.345518, 0.353122, 0.43845, 0.371231, 0.414777, 0.405014, 1.1273, 0.556013, 0.354262, 1.1073, 0.46012, 0.491759, 0.901797, 0.528685, 0.493498, 1.06356, 0.749761, 0.424537, 1.04935, 0.520917, 0.609096, 0.684151, 0.556904, 0.608583, 0.845725, 0.381164, 0.220262, 0.857165, 0.491731, 0.419536, 1.02509, 0.53451, 0.433202, 0.924776, 0.474248, 0.32165, 1.09557, 0.563042, 0.453144, 1.13074, 0.512261, 0.3826, 0.736727, 0.592357, 0.491227, 0.880334, 0.417114, 0.487408, 0.751242, 0.719538, 0.473298, 0.489311, 0.55275, 0.505254, 0.599404, 0.529035, 0.448665, 0.552237, 0.498913, 0.523924, 0.677645, 0.523399, 0.330464, 0.712019, 0.610237, 0.450109, 0.862399, 0.67555, 0.449251, 1.10507, 0.612191, 0.639116, 0.705574, 0.607241, 0.531698, 0.55361, 0.528125, 0.521284, 0.643237, 0.5069, 0.399527, 0.514986, 0.419552, 0.526332, 0.418387, 0.677005, 0.511944, 0.508969, 0.68663, 0.546449, 0.609226, 0.708612, 0.492676, 0.503906, 0.584925, 0.529195, 0.58059, 0.631112, 0.623395, 0.409076, 0.500441, 0.587116, 0.442641, 0.481043, 0.42932, 0.517711, 0.488642, 0.501818, 0.27815, 0.341127, 0.456492, 0.562483, 0.187052, 0.243288, 0.787531, 0.372513, 0.275371, 0.76636, 0.270145, 0.40904, 0.000867282]

#global p_k = [4720560.0, 2055208.0, 513804.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 4110400.0, 1027604.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 4110400.0, 1027604.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 4110400.0, 1027604.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 2055208.0, 4624240.0, 2055208.0, 81920.0]/1000
#}


###alexnet
#
#global target_sigma = 0.316 1%
global target_sigma = 0.7695# 5%
#global p_k = [1.54587e+07, 6.9984e+06, 4.3264e+06, 6.4896e+06, 6.4896e+06]/1000
global lambda_k = [18.9329, 45.384, 101.81, 112.228, 65.4673]
global c_k = [2.30766, 4.89974, 1.26762, 0, 2.09548]
global p_k = [1.05415e+08, 2.23949e+08, 1.4952e+08, 1.1214e+08, 7.47602e+07]/1000
#


function obj = phi (x)
obj = 0;
global p_k c_k lambda_k target_sigma
for i = [1:length(p_k)]
    obj = obj - p_k(i)*(log2(sqrt(x(i))*lambda_k(i)*target_sigma + c_k(i)));
endfor
endfunction

x0 = repmat([1.0/length(p_k)],1,length(p_k))
[x, obj, info, iter, nf, lambda] = sqp (x0, @phi, @g, [],0.005,0.99)

global delta = [];
function bits = bitwidth (x)
bits = [];
global delta;
global p_k c_k lambda_k target_sigma
for i = [1:length(p_k)]
    bits = [bits, ceil(-log2(sqrt(x(i))*lambda_k(i)*target_sigma + c_k(i)))];
    delta = [delta, -log2(sqrt(x(i))*lambda_k(i)*target_sigma + c_k(i))];
endfor
endfunction

sum(x)
a = bitwidth (x);
#fprintf('%s \n' , size(a))
fprintf('target sigma %f \n' , target_sigma)
fprintf('%d, ' , a)
fprintf('\n delta \n')
fprintf('%f, ' , delta)
fprintf('\n round_safe \n')
fprintf('%d, ' , round_safe(delta))
fprintf('\n round_standard \n')
fprintf('%d, ' , round_standard(delta))
fprintf('\n round_aggressive \n')
fprintf('%d, ' , round_aggressive(delta))
                      
